'use strict';

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Workout {
  constructor(coords, distance, duration) {
    _defineProperty(this, "date", new Date());

    _defineProperty(this, "id", (Date.now() + '').slice(-10));

    _defineProperty(this, "clicks", 0);

    // this.date = ...
    // this.id = ...
    this.coords = coords; // [lat, lng]

    this.distance = distance; // in km

    this.duration = duration; // in min
  }

  _setDescription() {
    // prettier-ignore
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${months[this.date.getMonth()]} ${this.date.getDate()}`;
  }

  click() {
    this.clicks++;
  }

}

class Running extends Workout {
  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);

    _defineProperty(this, "type", 'running');

    this.cadence = cadence;
    this.calcPace();

    this._setDescription();
  }

  calcPace() {
    // min/km
    this.pace = this.duration / this.distance;
    return this.pace;
  }

}

class Cycling extends Workout {
  constructor(coords, distance, duration, elevationGain) {
    super(coords, distance, duration);

    _defineProperty(this, "type", 'cycling');

    this.elevationGain = elevationGain; // this.type = 'cycling';

    this.calcSpeed();

    this._setDescription();
  }

  calcSpeed() {
    // km/h
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }

} // const run1 = new Running([39, -12], 5.2, 24, 178);
// const cycling1 = new Cycling([39, -12], 27, 95, 523);
// console.log(run1, cycling1);
///////////////////////////////////////
// APPLICATION ARCHITECTURE


const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');

var _map = /*#__PURE__*/new WeakMap();

var _mapZoomLevel = /*#__PURE__*/new WeakMap();

var _mapEvent = /*#__PURE__*/new WeakMap();

var _workouts = /*#__PURE__*/new WeakMap();

class App {
  constructor() {
    _map.set(this, {
      writable: true,
      value: void 0
    });

    _mapZoomLevel.set(this, {
      writable: true,
      value: 13
    });

    _mapEvent.set(this, {
      writable: true,
      value: void 0
    });

    _workouts.set(this, {
      writable: true,
      value: []
    });

    // Get user's position
    this._getPosition(); // Get data from local storage


    this._getLocalStorage(); // Attach event handlers


    form.addEventListener('submit', this._newWorkout.bind(this));
    inputType.addEventListener('change', this._toggleElevationField);
    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));
  }

  _getPosition() {
    if (navigator.geolocation) navigator.geolocation.getCurrentPosition(this._loadMap.bind(this), function () {
      alert('Could not get your position');
    });
  }

  _loadMap(position) {
    const {
      latitude
    } = position.coords;
    const {
      longitude
    } = position.coords; // console.log(`https://www.google.pt/maps/@${latitude},${longitude}`);

    const coords = [latitude, longitude];

    _classPrivateFieldSet(this, _map, L.map('map').setView(coords, _classPrivateFieldGet(this, _mapZoomLevel)));

    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(_classPrivateFieldGet(this, _map)); // Handling clicks on map

    _classPrivateFieldGet(this, _map).on('click', this._showForm.bind(this));

    _classPrivateFieldGet(this, _workouts).forEach(work => {
      this._renderWorkoutMarker(work);
    });
  }

  _showForm(mapE) {
    _classPrivateFieldSet(this, _mapEvent, mapE);

    form.classList.remove('hidden');
    inputDistance.focus();
  }

  _hideForm() {
    // Empty inputs
    inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value = '';
    form.style.display = 'none';
    form.classList.add('hidden');
    setTimeout(() => form.style.display = 'grid', 1000);
  }

  _toggleElevationField() {
    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
  }

  _newWorkout(e) {
    const validInputs = (...inputs) => inputs.every(inp => Number.isFinite(inp));

    const allPositive = (...inputs) => inputs.every(inp => inp > 0);

    e.preventDefault(); // Get data from form

    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;

    const {
      lat,
      lng
    } = _classPrivateFieldGet(this, _mapEvent).latlng;

    let workout; // If workout running, create running object

    if (type === 'running') {
      const cadence = +inputCadence.value; // Check if data is valid

      if ( // !Number.isFinite(distance) ||
      // !Number.isFinite(duration) ||
      // !Number.isFinite(cadence)
      !validInputs(distance, duration, cadence) || !allPositive(distance, duration, cadence)) return alert('Inputs have to be positive numbers!');
      workout = new Running([lat, lng], distance, duration, cadence);
    } // If workout cycling, create cycling object


    if (type === 'cycling') {
      const elevation = +inputElevation.value;
      if (!validInputs(distance, duration, elevation) || !allPositive(distance, duration)) return alert('Inputs have to be positive numbers!');
      workout = new Cycling([lat, lng], distance, duration, elevation);
    } // Add new object to workout array


    _classPrivateFieldGet(this, _workouts).push(workout); // Render workout on map as marker


    this._renderWorkoutMarker(workout); // Render workout on list


    this._renderWorkout(workout); // Hide form + clear input fields


    this._hideForm(); // Set local storage to all workouts


    this._setLocalStorage();
  }

  _renderWorkoutMarker(workout) {
    L.marker(workout.coords).addTo(_classPrivateFieldGet(this, _map)).bindPopup(L.popup({
      maxWidth: 250,
      minWidth: 100,
      autoClose: false,
      closeOnClick: false,
      className: `${workout.type}-popup`
    })).setPopupContent(`${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`).openPopup();
  }

  _renderWorkout(workout) {
    let html = `
      <li class="workout workout--${workout.type}" data-id="${workout.id}">
        <h2 class="workout__title">${workout.description}</h2>
        <div class="workout__details">
          <span class="workout__icon">${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'}</span>
          <span class="workout__value">${workout.distance}</span>
          <span class="workout__unit">km</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">‚è±</span>
          <span class="workout__value">${workout.duration}</span>
          <span class="workout__unit">min</span>
        </div>
    `;
    if (workout.type === 'running') html += `
        <div class="workout__details">
          <span class="workout__icon">‚ö°Ô∏è</span>
          <span class="workout__value">${workout.pace.toFixed(1)}</span>
          <span class="workout__unit">min/km</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">ü¶∂üèº</span>
          <span class="workout__value">${workout.cadence}</span>
          <span class="workout__unit">spm</span>
        </div>
      </li>
      `;
    if (workout.type === 'cycling') html += `
        <div class="workout__details">
          <span class="workout__icon">‚ö°Ô∏è</span>
          <span class="workout__value">${workout.speed.toFixed(1)}</span>
          <span class="workout__unit">km/h</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">‚õ∞</span>
          <span class="workout__value">${workout.elevationGain}</span>
          <span class="workout__unit">m</span>
        </div>
      </li>
      `;
    form.insertAdjacentHTML('afterend', html);
  }

  _moveToPopup(e) {
    // BUGFIX: When we click on a workout before the map has loaded, we get an error. But there is an easy fix:
    if (!_classPrivateFieldGet(this, _map)) return;
    const workoutEl = e.target.closest('.workout');
    if (!workoutEl) return;

    const workout = _classPrivateFieldGet(this, _workouts).find(work => work.id === workoutEl.dataset.id);

    _classPrivateFieldGet(this, _map).setView(workout.coords, _classPrivateFieldGet(this, _mapZoomLevel), {
      animate: true,
      pan: {
        duration: 1
      }
    }); // using the public interface
    // workout.click();

  }

  _setLocalStorage() {
    localStorage.setItem('workouts', JSON.stringify(_classPrivateFieldGet(this, _workouts)));
  }

  _getLocalStorage() {
    const data = JSON.parse(localStorage.getItem('workouts'));
    if (!data) return;

    _classPrivateFieldSet(this, _workouts, data);

    _classPrivateFieldGet(this, _workouts).forEach(work => {
      this._renderWorkout(work);
    });
  }

  reset() {
    localStorage.removeItem('workouts');
    location.reload();
  }

}

const app = new App();